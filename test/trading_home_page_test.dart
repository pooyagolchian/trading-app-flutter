import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:provider/provider.dart';
import 'package:trading_app/features/trading/data/trading_provider.dart';
import 'package:trading_app/features/trading/presentation/pages/trading_home_page.dart';
import 'package:trading_app/core/services/websocket_service.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:trading_app/features/trading/presentation/widgets/trading_list_tile.dart';
// RUN mock-test.sh before run flutter test
import 'trading_home_page_test.mocks.dart'; // This file will be generated by command - MOCK data

@GenerateMocks([WebSocketService])
void main() {
  late MockWebSocketService mockWebSocketService;
  late TradingProvider tradingProvider;

  setUp(() async {

    TestWidgetsFlutterBinding.ensureInitialized();
    await dotenv.load();


    mockWebSocketService = MockWebSocketService();


    when(mockWebSocketService.priceStream).thenAnswer(
          (_) => Stream.empty(),
    );


    tradingProvider = TradingProvider(webSocketService: mockWebSocketService);
  });

  testWidgets('TradingHomePage displays correctly and adds a symbol', (WidgetTester tester) async {

    await tester.pumpWidget(
      MultiProvider(
        providers: [
          ChangeNotifierProvider<TradingProvider>.value(value: tradingProvider),
        ],
        child: const MaterialApp(
          home: TradingHomePage(),
        ),
      ),
    );

    await tester.pumpAndSettle();


    await tester.enterText(find.byType(TextField), 'BINANCE:BTCUSDT');
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();


    expect(find.text('BINANCE:BTCUSDT'), findsOneWidget);
    expect(find.byType(TradingListTile), findsOneWidget);
  });
}
